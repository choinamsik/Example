package com.example.demo.dao;

import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.example.demo.controller.UserVO;

@Repository("mysqlDao")
public class UserMysqlDAO implements UserDAO{

	
	@Autowired
	JdbcTemplate jdbcTemplate; 
	
	
 
	@Override
	public boolean insert(UserVO u) {
		String sql = "INSERT INTO user VALUES(NULL,?,?,?)"; /* */
		int rows = jdbcTemplate.update(sql, u.getName(), u.getPhone(), u.getEmail());
						  /* rows는 추가하는 행을 의미한다.*/
		return rows>0;   /*insert,update,delete 3가지 기능은 update로 다 구현가능하다*/
	}
	
	
	
	@Override /* 레코드를 저장할 대 자동으로 생성된 필드의 값을 가져오는 방법*/
	public int insertAndGetId(UserVO u) {
		String sql = "INSERT INTO user VALUES(NULL,?,?,?)"; 
		  KeyHolder KeyHolder = new GeneratedKeyHolder();
		  jdbcTemplate.update(conn->{
		  		PreparedStatement pstmt = conn.prepareStatement(
		  			sql, new String[] {"num"});
		  		pstmt.setString(1, u.getName());
		  		pstmt.setString(2, u.getPhone());
		  		pstmt.setString(3, u.getEmail());
		  		return pstmt;
		  }, KeyHolder);
		  return KeyHolder.getKey().intValue();
	}
	
	
	
	
	/* 레코드를 저장할 대 자동으로 생성된 필드의 값을 가져오는 방법
	 * 부모자식간 테이블에서 자동증가 값을 자식테이블에도 자동추가 기능을 쓰기위함의 함수
	 * 특히, 게시판에 글이 있고 첨부파일을 붙일때 그 때 많이 사용한다. 글의 순서와 첨부파일의
	 * 순서에 맞게 
	 * String sql = "INSERT INTO user VALUES(NULL,?,?,?)"; 
		  KeyHolder KeyHolder = new GeneratedKeyHolder();
		  jdbcTemplate.update(conn->{
		  		PreparedStatement pstmt = conn.prepareStatement(
		  			sql, new String[] {"num"});
		  		pstmt.setString(1, u.getName());
		  		pstmt.setString(2, u.getPhone());
		  		pstmt.setString(3, u.getEmail());
		  		return pstmt;
		  }, KeyHolder);
		  return KeyHolder.getKey().intValue();
	 * */
	
	

	@Override 
	public UserVO select(int num) { 
		String sql = "INSERT * FROM user WHERE num=?"; 
		return jdbcTemplate.queryForObject(sql, (rs, i) -> /* return은 queryForObject함수를 실행시키고 그 함수안에 UserVO기능들을 리턴하겠다는 의미  */
			new UserVO(rs.getInt(1), rs.getString(2),
						rs.getString(3), rs.getString(4), 
						rs.getString(5))
			,num);
		/* 한개만 가져오려면 queryForObject를 사용한다.*/		
	}

	
	
	
	
	@Override
	public boolean update(UserVO u) {
		String sql = "UPDATE user SET email=? WHERE num=?"; 
		int rows = jdbcTemplate.update(sql, u.getEmail(), u.getNum());
		return rows>0;
	}

	@Override
	public boolean delete(int num) {
		String sql = "DELETE FROM user WHERE num=?";
		int rows = jdbcTemplate.update(sql, num);
		return rows>0;
	}

	
	@Override
	public ArrayList<UserVO> getlist() {
		String sql = "SELECT * FROM user";
		List<UserVO> uList = jdbcTemplate.query(sql,
				(rs,i)-> new UserVO(rs.getInt(1), rs.getString(2),
						rs.getString(3), rs.getString(4)));
		return new ArrayList<UserVO>(uList);
	}
	/* List<UserVO>는 인터페이스이고  ArrayList<UserVO>는 
	 * query는 인터페이스 함수형이 와야한다.
	 * query(String sql, RowMapper<UserVO> rowMapper) 이 형식을 위에 적용히신 형식이다
	 *  (rs. i)가   rs.get(i)라는 말이다. rs.nesxt()는 사용하지말게 되어있다.*/
	
	
	

	@Override
	public UserVO getuser(int num) {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public ArrayList<UserVO> user_list() {
		// TODO Auto-generated method stub
		return null;
	}

	
	
}
