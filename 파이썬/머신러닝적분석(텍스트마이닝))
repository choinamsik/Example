

-머신러닝적 분석-
ANN, DNN, CNN, RNN, GAN


◈퍼셉트론(입력층,출력층):XOR 
  1950년대 인공지능은 머신러닝을 할 수없다 하여 증명이 되었지만 지금은 그 문제점을 해결하고 머신러닝이 
  된다라는걸 다시 증명하였으면 현재 알파고나 테슬라의 자율주행화에 적용 되었으며 오차율이 제일 낮다.

◈ 분류,군집,회기

◈ 연관분석(장바구니분석) : ex)맥주 + 기저귀 상관관계 미국의 한 마트에서 금요일 저녁에는 항상 기저귀와 맥주가 많이 팔렸는데 알고보니 금요일에 남편이 퇴근하면 아내가 
                             기저귀를 구매해서 오라는 것이였으며 남편 또한 + 맥주를 같이 샀다는 데이터가 있었다 
                             또한 이외에도 맥주+치킨의 상관관계가 있으며 맥주를 시키면 치킨을 시킬 확률이 높은것이 매출의 상관관계를 나타낸다.
                             
◈ 지도학습, 비지도학습, 강화학습
  ANN(Artificial Neural Network) :  인공 신경망
  DNN(Deep Neural Network) : 지도학습, 비지도학습, 강화학습등을 DNN으로 진행하고 있다.
  
  
- 텍스트 마이닝-

◈ 상품에 리뷰를 달고 그에 대한 좋은 글과 나쁜글등 둘 중 사용자가 원하는 데이터를 추출한다.
◈ 누구나 형태가 없이 자유롭게 글을 쓸 수 있는 비정형 데이터
◈ 데이터 전처리(80%) >>> 학습용,검증용(20%(


▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

★★★ Numpy  Numpy  Numpy ★★★
숫자를 다루기 위한 라이브러리 (선형배수)
◈ 복잡한 구조의 기본이 된다.
◈ 과학 계산을 위한 라이브러리로서 다차원 배열을 처리하는데 필요한 여러 유용한 기능을 제공한다.
◈ 배열을 만드는데 사용하며 즉, 쉽게 생각하여 표를 만든다 생각한다. 
    ex)1행 2열  >>> ㅁㅁ  
    
    
    

★★★ Pandas  Pandas  Pandas ★★★
◈ pandas에서 다루는 테이블 및 2차원 구조를 DataFrame이라 한다.







★★★ matplotlib  matplotlib  matplotlib ★★★
◈ 파이썬에서 가장 많이 쓰는 시각화이며 2D의 데이터 시각화,컬러,분포등등을 나타낸다.
◈ Matplotlib는 파이썬에서 자료를 차트(chart)나 플롯(plot)으로 시각화(visulaization)하는 패키지이다.
   Matplotlib는 다음과 같은 정형화된 차트나 플롯 이외에도 저수준 api를 사용한 다양한 시각화 기능을 제공한다.
◈ 
    ◎ 라인 플롯(line plot)
    가장 간단한 플롯은 선을 그리는 라인 플롯(line plot)이다. 라인 플롯은 데이터가 시간, 순서 등에 따라 어떻게 변화하는지 보여주기 위해 사용한다.
    명령은 pylab 서브패키지의 plot 명령을 사용한다.
    
    plt.title("Plot")
    plt.plot([1, 4, 9, 16])
    plt.show()


▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
◈
    ◎ 스캐터 플롯(scatter plot)
    2차원 데이터 즉, 두 개의 실수 데이터 집합의 상관관계를 살펴보려면 scatter 명령으로 스캐터 플롯을 그린다. 스캐터 플롯의 점 하나의 위치는 데이터 하나의 x, y 값이다.
    
    X = np.random.normal(0, 1, 100)
    Y = np.random.normal(0, 1, 100)
      plt.title("Scatter Plot")
      plt.scatter(X, Y)
      plt.show()
      
    데이터가 2차원이 아니라 3차원 혹은 4차원인 경우에는 점 하나의 크기 혹은 색깔을 이용하여 다른 데이터 값을 나타낼 수도 있다. 이런 차트를 버블 차트(bubble chart)라고 한다. 
    크기는 s 인수로 색깔은 c 인수로 지정한다.
    
    N = 30
    np.random.seed(0)
    x = np.random.rand(N)
    y1 = np.random.rand(N)
    y2 = np.random.rand(N)
    y3 = np.pi * (15 * np.random.rand(N))**2
      plt.title("Bubble Chart")
      plt.scatter(x, y1, c=y2, s=y3)
      plt.show()

▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
◈
    ◎ 컨투어 플롯(contour plot)
    입력 변수가 x, y 두 개이고 출력 변수가 z 하나인 경우에는 3차원 자료가 된다. 3차원 자료를 시각화하는 방법은 명암이 아닌 등고선(contour)을 사용하는 방법이다. 
    contour 혹은 contourf 명령을 사용한다. contour는 등고선만 표시하고 contourf는 색깔로 표시한다. 입력 변수 x, y는 그대로 사용할 수 없고 meshgrid 명령으로 
    그리드 포인트 행렬을 만들어야 한다. 더 자세한 내용은 다음 웹사이트를 참조한다.
    
    def f(x, y):
    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)

      n = 256
      x = np.linspace(-3, 3, n)
      y = np.linspace(-3, 3, n)
      XX, YY = np.meshgrid(x, y)
      ZZ = f(XX, YY)

      plt.title("Contour plots")
      plt.contourf(XX, YY, ZZ, alpha=.75, cmap='jet')
      plt.contour(XX, YY, ZZ, colors='black')
      plt.show()
      

▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
◈
    ◎ 서피스 플롯(surface plot)
    3차원 플롯은 등고선 플롯과 달리 Axes3D라는 3차원 전용 axes를 생성하여 입체적으로 표시한다.
    plot_wireframe, plot_surface 명령을 사용한다.
    
    from mpl_toolkits.mplot3d import Axes3D
      X = np.arange(-4, 4, 0.25)
      Y = np.arange(-4, 4, 0.25)
      XX, YY = np.meshgrid(X, Y)
      RR = np.sqrt(XX**2 + YY**2)
      ZZ = np.sin(RR)

      fig = plt.figure()
      ax = Axes3D(fig)
      ax.set_title("3D Surface Plot")
      ax.plot_surface(XX, YY, ZZ, rstride=1, cstride=1, cmap='hot')
      plt.show()
      

▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
◈
    ◎ 바 차트(bar chart)
    x 데이터가 카테고리 값인 경우에는 bar 명령과 barh 명령으로 바 차트(bar chart) 시각화를 할 수 있다. 가로 방향으로 바 차트를 그리려면 barh 명령을 사용한다
    
    import matplotlib.pylab as plt

        y = [2, 3, 1]
        x = np.arange(len(y))
        xlabel = ['가', '나', '다']
        plt.title("Bar Chart")
        plt.bar(x, y)
        plt.xticks(x, xlabel)
        plt.yticks(sorted(y))
        plt.xlabel("가나다")
        plt.ylabel("빈도 수")
        plt.show()
        
        
    (가로 bar)
    xerr 인수나 yerr 인수를 지정하면 에러 바(error bar)를 추가할 수 있다.
    다음 코드에서 alpha는 투명도를 지정한다. 0이면 완전 투명, 1이면 완전 불투명이다.

    np.random.seed(0)

        people = ['몽룡', '춘향', '방자', '향단']
        y_pos = np.arange(len(people))
        performance = 3 + 10 * np.random.rand(len(people))
        error = np.random.rand(len(people))

        plt.title("Barh Chart")
        plt.barh(y_pos, performance, xerr=error, alpha=0.4)
        plt.yticks(y_pos, people)
        plt.xlabel('x 라벨')
        plt.show()


▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
◈
    ◎ 히스토그램(histogram)
    
    히스토그램을 그리기 위한 hist 명령도 있다. hist 명령은 bins 인수로 데이터를 집계할 구간 정보를 받는다. 반환값으로 데이터 집계 결과를 반환한다.

    np.random.seed(0)
      x = np.random.randn(1000)
      plt.title("Histogram")
      arrays, bins, patches = plt.hist(x, bins=10)
      plt.show()
      
      
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
 ◈   
    ◎ 파이차트
    카테고리 별 값의 상대적인 비교를 해야 할 때는 pie 명령으로 파이 차트(pie chart)를 그릴 수 있다. 파이 차트를 그릴 때는 윈의 형태를 유지할 수 있도록 다음 명령을 실행해야 한다.
    
    plt.axis('equal')
    labels = ['개구리', '돼지', '개', '통나무']
    sizes = [15, 30, 45, 10]
    colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
    explode = (0, 0.1, 0, 0)
    plt.title("Pie Chart")
    plt.pie(sizes, explode=explode, labels=labels, colors=colors,
            autopct='%1.1f%%', shadow=True, startangle=90)
    plt.axis('equal')
    plt.show()
    
      
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
◈   
    ◎ 박스 플롯(box plot)
    
    
    
