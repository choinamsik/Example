-----------------------------------------------------------------------------------------------------------------------------------------------------------
★Controller★

package com.example.demo.project;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.util.pageUtil;
import com.example.demo.vo.FreeboardVO;
import com.example.demo.vo.ProjectUserVO;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

@Controller
@RequestMapping("/")
public class FreeBoardController {

	@Autowired
	private ProjectMapper projectMapper;
	@Autowired
	private FreeboardMapper freeboardmapper;


	@GetMapping("/main")
	public String main() {

		return "freeboard_main";
	}

	@GetMapping("/join")
	public String join() {

		return "freeboard_join";
	}

	@GetMapping("/login")
	public String login() {

		return "freeboard_login";
	}

	@GetMapping("/writer")
	public String show_input() {

		return "freeboard_writer";
	}
	@GetMapping("/reply")
	public String show_reply(@RequestParam(value = "num") Integer num, Model model) {
		
		FreeboardVO board = freeboardmapper.getReply(num);
		
		model.addAttribute("board",board);
		
		return "freeboard_reply";
	} 
	
	@GetMapping("/comments")
	public String show_comments() {
		
		return "freeboard_comments";
	}
	
	

	@GetMapping("/list")
	public String showlist(Model model, @RequestParam(value = "page", defaultValue = "1") Integer page) {
		/*
		 * 기본적으로 적은경우 필수 값으로 인식함 값이 없어도 로직이 처리 되도록 처리가 필요
		 */
		PageHelper.startPage(page, 10);
		PageInfo<FreeboardVO> pageInfo = new PageInfo<FreeboardVO>(freeboardmapper.getBoardList());

		model.addAttribute("BoardList", pageInfo.getList());
		model.addAttribute("pageInfo", pageInfo);
		
		model.addAttribute("page", page);
		return "freeboard_list";
	}


	@GetMapping("/detail/{num}")
	public String detail_list(@PathVariable int num, Model model) { 
		FreeboardVO freeboardVO = freeboardmapper.selectBoardDetailByNum(num); 
		model.addAttribute("freeboardVO", freeboardVO); 													
		return "freeboard_detail"; 
	}

	
	@GetMapping("/edit")
	public String editForm(Model model, @ModelAttribute FreeboardVO vo) {
		
		FreeboardVO freeBoardVO= freeboardmapper.selectBoardDetailByNum(vo.getNum());
		
		model.addAttribute("freeBoardVO", freeBoardVO);
		
		
		return "freeboard_edit";
	}
	
	
	@PostMapping("/edit")
	public String edit(Model model, @RequestParam Integer num) {
		FreeboardVO freeBoardVO= freeboardmapper.selectBoardDetailByNum(num);
		
		model.addAttribute("freeBoardVO", freeBoardVO);
		
		
		return "freeboard_edit";
	}
	
	@PutMapping("/edit")
	public @ResponseBody boolean edit(@ModelAttribute FreeboardVO f) {

		int result = freeboardmapper.updateBoard(f);
		if(result > 0) {
			return true;
		} else {
			return false;
		}
	}
	
	
	@ResponseBody
	@DeleteMapping(value = "/delete")
	public boolean delete_board(@RequestParam(value = "num") int num) {
		int delete_list = freeboardmapper.deleteBoard(num);
		if (delete_list > 0) {
			return true;
		} else {
			return false;
		}
	}


	
	@PostMapping(value = "/user/join")
	public @ResponseBody boolean boardJoin(@ModelAttribute ProjectUserVO vo) {
		int join_res = projectMapper.insertUser(vo);
		if (join_res > 0) {
			return true;
		} else {
			return false;
		}

	}

	
	
	@PostMapping(value = "/user/login")
	public @ResponseBody boolean boardLogin(@ModelAttribute ProjectUserVO vo, HttpSession session) {
		ProjectUserVO login_res = projectMapper.loginUser(vo);
		if (login_res != null) {
			session.setAttribute("loginUserData", login_res);
			return true;
		} else {
			return false;
		}
	}

	
	
	@PostMapping(value = "save")
	@ResponseBody
	@Transactional
	public String save_board(@ModelAttribute("board") FreeboardVO board,
			@RequestParam(value = "attachments") MultipartFile[] multipart_file) {
		/*
		 * 웹브라우저에서 받는 값을 form에 있는 attachments로 받겠다이며 multipart_file의 내용들을
		 * MultipartFile[] 의 배열에 담겠다
		 */
		int result = freeboardmapper.save_board(board);
		// 고유 값
		for (MultipartFile file : multipart_file) {
			if (!file.isEmpty()) {
				// image upload
			}
		}
		// 폼데이터를 받겠다.
		if (result > 0) {
			return "success"; // (redirect)
		} else {
			return "fail";
		}

	}

	@PostMapping(value = "/add_reply")
	public @ResponseBody boolean addReplyJson(@RequestBody Map<String, Object> paramMap) {
 
		 
		int result = freeboardmapper.addReply(paramMap);
		
		if(result > 0 ) {
			return true;
		} else {
			return false;
		}
	}
	
	 
	
	@PostMapping(value = "/reply_list")
	public @ResponseBody Map<String, Object> Replylist (@RequestParam(value = "pageNum", defaultValue = "1") Integer pageNum) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		pageUtil pageUtil = new pageUtil(pageNum, freeboardmapper.reply_list_size());
		List<FreeboardVO> replyList = freeboardmapper.reply_list(pageUtil);
		paramMap.put("pageUtil", pageUtil);
		paramMap.put("replyList", replyList);
		return paramMap;
	}
	
	
	
	
}




























//@GetMapping("/detail/{num}")
//public String detail_list(@PathVariable int num,
//		Model model) { 
						/*
						 * ("/detail/{num}")에서 num을 적으면 ,num을 받겠다는 거고 그럼 @PathVariable int num를 적어야 겟맵핑
						 * num이 int num으로 받겠다는 걸 표시해주게 된다.안써주면 안에 의미없는 문자로 된다.
						 */
	
	//FreeboardVO freeboardVO = freeboardmapper.selectBoardDetailByNum(num); 
											/*
											 * freeboardVO 타입 /// freeboardVO 변수 ///
											 * freeboardmapper.selectBoardDetailByNum(num) 프리보드 맵퍼에있는 셀렉트보드디테일넘함수
											 */
	//model.addAttribute("freeboardVO", freeboardVO); 
													/*
													 * jsp에 넘겨주기기 위해 mondel에 위에 freeboardVO값을 넣어준다. 그러면 jsp에서 키값인
													 * freeboardVO.{}로 사용이 가능하다.
													 */
	//return "freeboard_detail"; /* 위 함수의 모든 내용들을 jsp의 freeboard_detail로 넘겨주겠다. */
//}

/*
 * @GetMapping("/detail") public String show_list(Model model) {
 * List<FreeboardVO> detail_show_list = freeboardmapper.getBoard();
 * model.addAttribute("Detail_show_list", detail_show_list); return
 * "freeboard_detail"; }
 */





/*
@PostMapping("/edit")
@ResponseBody
public boolean edit(@ModelAttribute FreeboardVO f) {
	if(freeboardmapper.updateBoard(f)+" ") {
		return true;
	} else {
		return false;
	}
}


@GetMapping("/edit")
public String editForm(Model model, @ModelAttribute FreeboardVO vo) {
	
	FreeboardVO freeBoardVO= freeboardmapper.selectBoardDetailByNum(vo.getNum());
	
	model.addAttribute("freeBoardVO", freeBoardVO);
	
	
	return "freeboard_edit";
}
*/





/*
 * 
 * @PostMapping("/fb/upload")
 * 
 * @ResponseBody public String upload(@RequestParam("files")MultipartFile[]
 * mfiles, HttpServletRequest request,
 * 
 * @RequestParam("author")String author) { ServletContext context =
 * request.getServletContext(); String savePath =
 * context.getRealPath("/WEB-INF/upload"); try{ for(int i=0; i<mfiles.length;
 * i++) { mfiles[i].transferTo( new File(savePath + "/" +
 * mfiles[i].getOriginalFilename()));
 * 
 * //MultipartFile 주요 메소드 String cType = mfiles[i].getContentType(); String
 * pName = mfiles[i].getName(); Resource res = mfiles[i].getResource(); long
 * fSize = mfiles[i].getSize(); boolean empty = mfiles[i].isEmpty();
 * 
 * } String msg = String.format("파일(d%)저장성공(작성자:%s)", mfiles.length,author);
 * return msg; } catch (Exception e){ e.printStackTrace(); return "파일 저장 실패"; }
 * 
 * }
 * 
 */

-----------------------------------------------------------------------------------------------------------------------------------------------------
★FreeboardMapper.java★

package com.example.demo.project;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Mapper;

import com.example.demo.util.pageUtil;
import com.example.demo.vo.FreeboardVO;

@Mapper
public interface FreeboardMapper {
		
		List<FreeboardVO> getBoardList();
	
		int updateBoard(FreeboardVO f);

		int deleteBoard(int num);
		
		int save_board(FreeboardVO f);

		FreeboardVO selectBoardDetailByNum(int num); /* (int num은 FreeboardVO selectBoardDetailByNum 여기서 FreeboardVO 타입을 selectBoardDetailByNum이 변수에 넣겠는데 FreeboardVO타입에서 num을 받겠다는 뜼.)*/
		
		int addReply(Map<String, Object> paramMap);
		
		List<FreeboardVO> reply_list(pageUtil page);

		int reply_list_size();
	
		FreeboardVO getReply(Integer num);
	
	
}


-----------------------------------------------------------------------------------------------------------------------------------------------------
★FreeboardMapper.XML★


<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.example.demo.project.FreeboardMapper">


	<select id="getReply" parameterType="Integer" resultType="com.example.demo.vo.FreeboardVO">
		SELECT
			r.num, r.user_num, r.reply AS contents, DATE_FORMAT(r.reply_date,'%Y년 %m월 %d일 %H시 %i분') AS wdate, 
			r.reply_parent, IFNULL(u.name,'익명') AS author	
		FROM
			reply r
		LEFT JOIN
			users u
		ON
			r.user_num = u.num
		WHERE
			r.num = #{num}

	</select>

	<select id="getBoardList" resultType="com.example.demo.vo.FreeboardVO" parameterType="Integer">
		SELECT
			num,author,DATE_FORMAT(wdate,'%Y년 %m월 %d일 %H시 %i분') AS wdate,title,contents 
		FROM
			freeboard
	</select>

    <select id="selectBoardDetailByNum" parameterType="Integer" resultType="com.example.demo.vo.FreeboardVO">
    
    	SELECT 
    		num
    		,author
    		,DATE_FORMAT(wdate,'%Y년 %m월 %d일 %H시 %i분') AS wdate
    		,title
    		,contents 
		FROM freeboard
		WHERE num = #{ num }
    
    </select>
    
    <select id="reply_list_size" resultType="Integer">
    WITH RECURSIVE tmp1 AS
	(
	SELECT
		num, user_num, reply, reply_date, reply_parent,
        CONCAT(REPEAT('0',6-CHAR_LENGTH(reply_parent)),CAST(reply_parent AS CHAR(40))) AS path, 1 AS lavel
    FROM
		reply
	WHERE
		reply_parent = 0
	UNION
    SELECT
		e.num, e.user_num, e.reply, e.reply_date, e.reply_parent,
		CONCAT(REPEAT('0',6-CHAR_LENGTH(e.reply_parent)),CAST(e.reply_parent AS CHAR(40))) AS path, t.lavel + 1 AS lavel
    FROM
		tmp1 t
	JOIN
		reply e
	ON
		t.num = e.reply_parent
	)
	SELECT
		COUNT(*)
	FROM
		tmp1 a
	LEFT JOIN
		users u
	ON
		a.user_num = a.num
    </select>
    
    <select id="reply_list" parameterType="Integer" resultType="com.example.demo.vo.FreeboardVO">
    <!--
    SELECT
	r.num, r.reply AS contents, reply_date AS wdate, u.name AS author
	FROM
		reply r
	LEFT OUTER JOIN
		users u
	ON
		r.user_num = u.num
	-->
	WITH RECURSIVE tmp1 AS
	(
	SELECT
		num, user_num, reply, reply_date, reply_parent,
        CONCAT(REPEAT('0',6-CHAR_LENGTH(num)),CAST(num AS CHAR(40))) AS path, 1 AS lavel
    FROM
		reply
	WHERE
		reply_parent = 0
	UNION
    SELECT
		e.num, e.user_num, e.reply, e.reply_date, e.reply_parent,
		CONCAT(REPEAT('0',6-CHAR_LENGTH(e.num)),CAST(e.num AS CHAR(40))) AS path, t.lavel + 1 AS lavel
    FROM
		tmp1 t
	JOIN
		reply e
	ON
		t.num = e.reply_parent
	)
	SELECT
		a.num, a.user_num, a.reply AS contents, DATE_FORMAT(a.reply_date,'%Y년 %m월 %d일 %H시 %i분')  AS wdate, 
		a.reply_parent, a.path, a.lavel, u.name AS author
	FROM
		tmp1 a
	LEFT OUTER JOIN
		users u 
	ON
		a.user_num = a.num
	ORDER BY
		path
	limit
		${limit - 1}, ${PAGE_SIZE}
    </select>
    
	<insert id="save_board" useGeneratedKeys="true" keyProperty="num" parameterType="com.example.demo.vo.FreeboardVO" >
	 	INSERT INTO freeboard VALUES (NULL, #{author}, NOW(), #{title},#{contents} )
	</insert>
	
	<insert id="boardInsert" parameterType="com.example.demo.vo.FreeboardVO">
        INSERT INTO
        VALUES (#{title},#{author},#{wdate},#{writer},  ,#{contents})
    </insert>
	
	<insert id="addReply" parameterType="map">
		INSERT INTO
		reply
		 (reply_parent, user_num, reply, reply_date)
		VALUES
		(#{reply_parent}, #{user_num}, #{reply}, now())
	</insert>
	
	
	<update id="updateBoard" parameterType="com.example.demo.vo.FreeboardVO">
		UPDATE
			freeboard
		SET
			title = #{title},
			contents=#{contents}
		WHERE
			num= #{num} <!-- 프리보트 num과 일치하는 num의 타이틀과 내용을 바꾸겠다. -->
	</update>
	
	
	<delete id="deleteBoard" parameterType="Integer" >
		DELETE FROM freeboard WHERE num = #{num}	
	</delete>
	





    

	

	<!--
	<insert id="insertBoard">
	 	INSERT INTO freeboard VALUES (NULL, #{author}, NOW(),#{title},#{contents})
	</insert>
	
	<select id="getBoardList"
	resultType="com.example.demo.vo.FreeboardVO"
	parameterType="Integer">
		SELECT num,author,wdate,title,contents 
		FROM freeboard

	</select>
	
	
	<select id="addAndGetKey" resultType="Integer">
		SELECT num,author,wdate,title,contents
		FROM freeboard
		WHERE num = #{num}
	</select>
	
	<update id="updateBoard"
	parameterType="com.example.demo.vo.FreeboardVO">
		UPDATE freeboard
		SET title = #{title}, contents=#{contents}
		WHERE num= #{num}
	</update>
	
	<delete id="deleteBoard" parameterType="Integer">
		DELETE FROM freeboard WHERE num = #{num}	
	</delete>
	 -->
	
</mapper> 



-----------------------------------------------------------------------------------------------------------------------------------------------------
★pageutil★

package com.example.demo.util;

public class pageUtil {
	private static final Integer PAGE_SIZE = 10;
	private static final Integer BLOCK_SIZE = 10;
	
	private Integer current_page;
	private boolean prev_page;
	private boolean next_page;
	private boolean first_page;
	private boolean last_page;
	private Integer total_page;
	
	private Integer start_block;
	private Integer end_block;
	
	private Integer limit; 
	private Integer offset;
	
	
	
	
	public pageUtil(Integer current_page, Integer list_count) {
		
		this.total_page = list_count / PAGE_SIZE;
		if(list_count % PAGE_SIZE > 0) {
			this.total_page++;
		}
		
		setCurrent_page(current_page);
		
		this.start_block = ((this.current_page / BLOCK_SIZE) * BLOCK_SIZE) + 1;
		this.end_block 	 = (this.start_block) + BLOCK_SIZE - 1;
		if(this.end_block > this.total_page) {
			this.end_block = this.total_page;
		}
		this.limit 	= ((current_page - 1) * PAGE_SIZE) + 1;
		
		this.offset = ((this.limit) + PAGE_SIZE);
		
		this.prev_page = this.start_block == 1 ? false : true;
		this.next_page = (this.end_block * PAGE_SIZE) >= total_page ? false : true;
	}
	
	public Integer getCurrent_page() {
		return current_page;
	}
	public void setCurrent_page(Integer current_page) {
		if(current_page > this.total_page) {
			this.current_page = this.total_page;
		} else {
			this.current_page = current_page;
		}
	}
	public boolean isPrev_page() {
		return prev_page;
	}
	public void setPrev_page(boolean prev_page) {
		this.prev_page = prev_page;
	}
	public boolean isNext_page() {
		return next_page;
	}
	public void setNext_page(boolean next_page) {
		this.next_page = next_page;
	}
	public boolean isFirst_page() {
		return first_page;
	}
	public void setFirst_page(boolean first_page) {
		this.first_page = first_page;
	}
	public boolean isLast_page() {
		return last_page;
	}
	public void setLast_page(boolean last_page) {
		this.last_page = last_page;
	}
	public Integer getTotal_page() {
		return total_page;
	}
	public void setTotal_page(Integer total_page) {
		this.total_page = total_page;
	}
	public Integer getStart_block() {
		return start_block;
	}
	public void setStart_block(Integer start_block) {
		this.start_block = start_block;
	}
	public Integer getEnd_block() {
		return end_block;
	}
	public void setEnd_block(Integer end_block) {
		this.end_block = end_block;
	}
	public Integer getLimit() {
		return limit;
	}
	public void setLimit(Integer limit) {
		this.limit = limit;
	}
	public Integer getOffset() {
		return offset;
	}
	public void setOffset(Integer offset) {
		this.offset = offset;
	}
	public static Integer getPageSize() {
		return PAGE_SIZE;
	}
	public static Integer getBlockSize() {
		return BLOCK_SIZE;
	}
	
	
	
}




-----------------------------------------------------------------------------------------------------------------------------------------------------
★JSP★

<%@ page language="java" contentType="text/html; charset=UTF-8"  pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ page import="java.util.*" %>

<!DOCTYPE html>
<html>
<head>

<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
 <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>


<meta charset="UTF-8">
<title>게시물 리스트 페이지</title>

<style>
		a { text-decoration: none; color: black; }
	    a:visited { text-decoration: none; }
	    a:hover { color: rgb(0, 178, 248); }
	    a:focus { text-decoration: none; }
	    a:hover, a:active { text-decoration: none; }
	    
	    h1{
	  	 	font-size: 100px;
	  	 	margin-top: 50px;
	  	 	font-weight: bold;
	  	 	text-shadow: 2px 2px 2px gray;
	  	 	color: white;
	  	 	
	  	}
	  	 body{background-image: url(../../images/listt.jpg);
	       background-size: cover;
	       
		}
	    
		#table{
			text-align: center;
			align-items: center;
			margin: auto;
			
		}
		#headline{
			text-align: center;
			align-items: center;
			margin: auto;
			
		}
		th{
			text-align: center;
			align-items: center;
			margin: auto;
			color: white;
			text-shadow: 2px 2px 2px gray;
		}
		checkbox{
			
		}
		
		
		
		

</style>

    
<script type="text/javascript">  
$(function() {
	
	$("#ck_all").on('change',function() {											/* input id값인 ck_all을 클릭했을때 change이벤트를 주는 함수 */
        var chk = $(this).is(":checked");//.attr('checked');  						/* .is(":checked")는 웹브라우저에서 체크를 했는지 안했는지 여부를 묻는 의미 그 값을 var=chk로 준다.*/
        if(chk) {											   
        	$("tr").not(0).find('input[type=checkbox]').prop('checked', true); 		/* 만약에 클릭을 하면 not(0)는 현재 클릭한 대상 외 모두를 체크하라는 의미고 eq:(1)을 하면 인덱스 번호(1)에 해당하는 것만 체크하라는 의미*/
        } else {																	/* input[type=checkbox]의 상태가 ture인거를 의미한다.*/
        	$("tr").not(0).find('input[type=checkbox]').prop('checked', false);
        }
    });
})



function delete_list(num){
			 
	 if(!confirm("해당 게시물을 정말로 삭제 하시겠습니까?")) return false;
	 
	 $.ajax({
		 url : "/list",
		 type : "post",
		 method : "delete",    				/*<!-- method방식으로는 post,get,delete,put, 5가지만 사용가능하다   -->*/
		 data : {'num': num},   			/*<!-- 여기에서의  {'num': num}은  (@RequestParam(value = "num") int num) 에서의 'num'은 value > "num"을 의미하고 : num은  int num을 의미한다. -->*/
		 success : function(){
			 alert("삭제되었습니다.");
			 location.href = "/list";
		 },
		 error : function(){
			 alert("해당 게시물을 삭제하는데 오류가 발생하였습니다. 다시 확인바랍니다.");
		 }
	 });
}


function page_redirect() {
	location.href = "/writer";
}

  
</script>



</head>
<body>



	<form>
	
	<h1 style="margin-left: 700px; margin-top: 50px; font-size: 70px;" ><a href="/main" style="color: white; text-shadow: 7px 7px 7px gray;">게시물 리스트 </a></h1>
	<div class="container">
		<table style="margin-top: 80px;" id="table" class="table table-hover">
			<tr style="font-size: 25px; font-weight: bold;">
				<th><input type="checkbox" id="ck_all"></th>
				<th> 번호</th>
				<th> 작성자</th>
				<th> 제목</th>
				<th> 글 내용</th>
				<th> 작성일</th>
			</tr>
		 	<c:forEach var="u" items="${BoardList}">
			 <tr style="font-size: 15px; color: white; text-shadow: 2px 2px 2px gray;"  >
				<td><input type="checkbox" name="checkRow" value="1"/></td>
			 	<td>${u.num}</td>
			    <td><a href="/detail/${u.num}" style="color: white; text-shadow: 2px 2px 2px gray;">${u.author}</a></td>
		    	<td><a href="/detail/${u.num}" style="color: white; text-shadow: 2px 2px 2px gray;"> ${u.title}</a></td>
		    	<td> ${u.contents}</td>	
		    	<td>${u.wdate}</td>
		     </tr>
			 </c:forEach> 
		 </table>
		 	
		 	<%--
		 	eq  =  equals
		 	ne  =  not equals
		 	--%>
<nav class="text-center">
	<ul class="pagination">
		<c:choose>
			<c:when test="${pageInfo.hasPreviousPage }">
				<li>
					<a href="/list?page=${page - 1 }" aria-label="Previous">
						<span aria-hidden="true">&laquo;</span> 
					</a>
				</li>
			</c:when>
			<c:otherwise>
				<li>
					<a href="#" aria-label="Previous">
						<span aria-hidden="true">&laquo;</span> 
					</a>
				</li>
			</c:otherwise>
		</c:choose>
		<c:forEach var="page" begin="${pageInfo.navigateFirstPage }" end="${pageInfo.navigateLastPage }">
			<c:choose>
				<c:when test="${pageInfo.pageNum ne page }">
					<li>
						<a href="/list?page=${page }">
							${page }
						</a>
					</li>
				</c:when>
				<c:otherwise>
					<li class="active">
						<span>
							${page }
						</span>
					</li>
				</c:otherwise>
			</c:choose>
		</c:forEach>
		<c:choose>
			<c:when test="${pageInfo.hasNextPage }">
				<li>
					<a href="/list?page=${page + 1}" aria-label="Next">
						<span aria-hidden="true">&raquo;</span> 
					</a>
				</li>
			</c:when>
			<c:otherwise>
				<li>
					<a href="#" aria-label="Next">
						<span aria-hidden="true">&raquo;</span> 
					</a>
				</li>
			</c:otherwise>
		</c:choose>
	</ul>
</nav>
			
		 	
		 	<p style="margin-left: 900px; margin-top: 20px;" class="pull-right">
			  <button type="button" class="btn btn-primary" onclick="page_redirect()">작성</button>
			  <button id="delete" type="button" class="btn btn-default" onclick="deleteBoard();"> 삭제</button>
			</p>
			
	 </div>
	 </form>
	 

</body>
</html>
